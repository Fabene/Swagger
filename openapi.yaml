openapi: 3.0.1
info:
  title: STD 21101
  
  
  version: 1.0.0

servers:
- url: https://std21101.com

tags:
- name: Students
- name: Course

paths:
  /students:
    post:
      tags:
      - Students
      summary: Create New Students
      description: Create New Students From an Array
      
      requestBody:
        description: Students To Be Created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Students'
          
        required: true
      responses:
        200:
          description: List Of Students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStudents'
      
        400:
          description: Bad Request
          content: {}
    put:
      tags:
      - Students
      summary: Update an existing Students
      operationId: updateStudents
      requestBody:
        description: Students object that needs to be added to the store
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/Students'
          application/xml:
            schema:
              $ref: '#/components/schemas/Students'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Students not found
          content: {}
        405:
          description: Validation exception
          content: {}  
    get:
      tags:
      - Students
      summary: Gets All Students
      description: Get All Students with Details
      operationId: findStudentsByStatus
      parameters:
      - name: page
        in: query
        schema:
          type: integer
      - name: page_Size
        in: query
        required: true
        schema:
          type: integer
          
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Students'
      
        400:
          description: Bad Request
          content: {}
          
  /Students/{StudentsId}:
    get:
      tags:
      - Students
      summary: Find Students by ID
      description: Returns a single Students
      operationId: getStudentsById
      parameters:
      - name: StudentsId
        in: path
        description: ID of Students to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                 $ref: '#/components/schemas/Students'
            application/json:
              schema:
                 $ref: '#/components/schemas/Students'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Student not found
          content: {}
          
    delete:
      tags:
      - Students
      summary: Deletes a Students
      operationId: deleteStudents
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: StudentsId
        in: path
        description: Students id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Students not found
          content: {}
    patch:
      tags:
      - Students
      summary: Update a user
      parameters:
        - name: StudentsId
          in: path
          required: true
          schema:
            type: object
          description: The GUID of a specific user 
        - name: JsonPatch
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Students'
      responses:
        '200':
          description: Successful response
         


  /Course:
    post:
      tags:
      - Course
      summary: Create New Course
      description: Create New Courses From an Array
      
      requestBody:
        description: Courses To Be Created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          
        required: true
      responses:
        200:
          description: List Of Courses
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Course'
      
        400:
          description: Bad Request
          content: {}
    
    
      
    put:
      tags:
      - Course
      summary: Update an existing Course
      operationId: updateCourse
      requestBody:
        description: Course object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Students'
          application/xml:
            schema:
             $ref: '#/components/schemas/Course'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
        405:
          description: Validation exception
          content: {}
    
    get:
      tags:
      - Course
      summary: Gets All Courses
      description: Get All Course with Details
      operationId: findCourseByStatus
      parameters:
      - name: page
        in: query
        schema:
          type: integer
      - name: page_Size
        in: query
        required: true
        schema:
          type: integer
          
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
      
        400:
          description: Bad Request
          content: {}
          
  /Course/{CourseId}:
    get:
      tags:
      - Course
      summary: Find Course by ID
      description: Returns a single Course
      operationId: getCourseById
      parameters:
      - name: CourseId
        in: path
        description: ID of Course to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Course'
            application/json:
              schema:
                 $ref: '#/components/schemas/Course'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Course not found
          content: {}
          
    delete:
      tags:
      - Course
      summary: Deletes a Course
      operationId: deleteCourse
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: CourseId
        in: path
        description: Course id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Course not found
          content: {}

    patch:
      tags:
      - Course
      summary: Update a user
      parameters:
        - name: CourseId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Course'
          description: The GUID of a specific user 
        - name: JsonPatch
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Successful response
         
 
components:
  schemas:
    CreateStudents:
      type: object
      properties:
        name:
          type: string
          description: Order Status
      
    Students:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    
    Course:
      type: object
      properties:
          id:
            type: integer
            format : int64
          name:
            type: string
          teacher:
            type: string
          createdate:
            type: string
            format: date
            
            